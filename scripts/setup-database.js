#!/usr/bin/env node

/**
 * Script para configurar la conexi√≥n a la base de datos
 * Uso: node scripts/setup-database.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupDatabase() {
  console.log('üîß Configuraci√≥n de Base de Datos - FaWorKi\n');
  
  console.log('üìã Informaci√≥n necesaria:');
  console.log('   - Tu contrase√±a de Supabase');
  console.log('   - El archivo se actualizar√° autom√°ticamente\n');
  
  const password = await question('üîë Ingresa tu contrase√±a de Supabase: ');
  
  if (!password || password.trim() === '') {
    console.log('‚ùå Contrase√±a no puede estar vac√≠a');
    process.exit(1);
  }
  
  // URL de conexi√≥n con la contrase√±a
  const databaseUrl = `postgresql://postgres.mlnwcrxqfztxbkmrusdn:${password}@aws-1-us-east-2.pooler.supabase.com:5432/postgres`;
  
  console.log('\nüìù Actualizando archivos de configuraci√≥n...');
  
  // Actualizar env.production
  const envProductionPath = path.join(__dirname, '..', 'env.production');
  let envProduction = fs.readFileSync(envProductionPath, 'utf8');
  
  envProduction = envProduction.replace(
    /DATABASE_URL="postgresql:\/\/postgres\.mlnwcrxqfztxbkmrusdn:\[YOUR-PASSWORD\]@aws-1-us-east-2\.pooler\.supabase\.com:5432\/postgres"/,
    `DATABASE_URL="${databaseUrl}"`
  );
  
  fs.writeFileSync(envProductionPath, envProduction);
  console.log('‚úÖ env.production actualizado');
  
  // Crear archivo .env para desarrollo
  const envPath = path.join(__dirname, '..', '.env');
  const envContent = `# Configuraci√≥n del servidor para desarrollo
PORT=3001
NODE_ENV=development

# Base de datos Supabase - Session Pooler
DATABASE_URL="${databaseUrl}"

# Variables de Supabase
SUPABASE_URL="https://mlnwcrxqfztxbkmrusdn.supabase.co"
SUPABASE_ANON_KEY="eyJhbGci0iJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3Mi0iJzdXE"

# JWT Secret
JWT_SECRET="faworki_jwt_secret_2024_very_secure_key"

# CORS Origins
CORS_ORIGINS="http://localhost:5173,http://localhost:3000,https://faworki.vercel.app"

# Configuraci√≥n de conexi√≥n de base de datos
DB_CONNECTION_TIMEOUT=10000
DB_QUERY_TIMEOUT=30000
DB_POOL_SIZE=10
`;

  fs.writeFileSync(envPath, envContent);
  console.log('‚úÖ .env creado para desarrollo');
  
  console.log('\nüß™ Probando conexi√≥n...');
  
  // Probar conexi√≥n
  try {
    require('dotenv').config();
    const { PrismaClient } = require('@prisma/client');
    
    const prisma = new PrismaClient({
      log: ['error'],
      errorFormat: 'pretty'
    });
    
    await prisma.$connect();
    console.log('‚úÖ Conexi√≥n exitosa a la base de datos');
    
    // Probar una consulta simple
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ Consulta de prueba exitosa');
    
    await prisma.$disconnect();
    
  } catch (error) {
    console.error('‚ùå Error de conexi√≥n:', error.message);
    console.log('\nüîç Posibles soluciones:');
    console.log('   1. Verifica que la contrase√±a sea correcta');
    console.log('   2. Aseg√∫rate de que el proyecto de Supabase est√© activo');
    console.log('   3. Verifica que est√©s usando el session pooler correcto');
  }
  
  console.log('\nüéâ Configuraci√≥n completada');
  console.log('üìÅ Archivos actualizados:');
  console.log('   - env.production');
  console.log('   - .env (desarrollo)');
  
  rl.close();
}

// Ejecutar si se llama directamente
if (require.main === module) {
  setupDatabase().catch(console.error);
}

module.exports = setupDatabase;
